{"version":3,"sources":["views/pages/StaticPage/ChatList.js","component/SocialShareBox.js"],"names":["useStyles","makeStyles","theme","root","padding","breakpoints","down","emojiBox","position","width","bottom","right","menuShare","top","sharemodal","textAlign","fontSize","cancelBtn","box","display","justifyContent","alignItems","borderRadius","cursor","margin","backgroundColor","paper","height","overflowY","borderTop","boxSizing","left","opacity","objectFit","dot","outer","box1","marginBottom","mess","color","transform","mess1","chatLeftBox","overflowX","maxWidth","overflow","fontWeight","textOverflow","whiteSpace","minWidth","chatimgBox","chatimgBoxicon","profilePic","nameSection","marginLeft","StyledMenuItem","withStyles","palette","primary","main","common","white","MenuItem","StyledMenu","border","props","elevation","getContentAnchorEl","anchorOrigin","vertical","horizontal","transformOrigin","isEmpty","obj","Object","keys","length","StyledMenuBox","anchorEl","setAnchorEl","chat","setOpen","setOpenShare","id","keepMounted","open","Boolean","onClose","mediaType","onClick","text","message","toast","success","SearchResults","searchResult","history","setShowUser","className","map","data","i","console","log","key","style","zIndex","push","pathname","search","_id","src","alt","userName","name","ChatList","classes","user","useContext","AuthContext","location","useLocation","useHistory","useState","selectedChat","setSelectedChat","isLoading","setIsLoading","receiverId","setReceiverId","showChatHistory","setShowChatHistory","senderId","setSenderId","showChat1","setShowChat1","showChat","setShowChat","newuserDetails","setNewuserDetails","isNewLoading","setIsNewLoading","image","setimage","openSendImage","setOpenSendImage","inputStr","setInputStr","showPicker","setShowPicker","React","openShare","searchUserName","setSearchUserName","searchUserList","setSearchUserList","undefined","checked","setChecked","isUploadingData","setIsUploadingData","showUser","useEffect","userData","chatMessageData","chatHistorygetSocket","messageList","checkNew","filter","messages","unReadCount","splice","lastChatData","encryptMessageHandler","a","Promise","all","chatObj","userIddd","CryptoJS","AES","decrypt","bytes","toString","enc","Utf8","plaintext","finalChatData","encryptedChat","getoffLineUserApi","axios","method","url","Apiconfigs","offLineUser","headers","token","window","localStorage","getItem","responseCode","getUserDetails","get","getOtheruserprofile","res","result","chatSend","chattext","isImage","event","preventDefault","encryptedMessage","encrypt","chatdetails","replace","oneToOneChatApi","then","response","response_code","catch","error","readChatHandler","cancelTokenSource","readChat","cancelToken","CancelToken","source","parseFloat","cancel","ids","split","changeChat","creatorListHandler","searchUserNameForsignUpTime","params","docs","disappearMessageHanlder","disappearUpdate","disappear","time","disappearViewHandler","disappearView","container","spacing","item","xs","sm","md","lg","variant","fullWidth","type","onChange","e","target","value","InputProps","startAdornment","details","background","mb","only","gray","isOnline","sortAddress","bnbAccount","address","align","component","borderBottom","ml","mt","flexDirection","wordBreak","moment","createdAt","local","fromNow","currentTarget","aria-controls","aria-haspopup","onSubmit","setTimeout","onEmojiClick","emojiObject","emoji","placeholder","endAdornment","accept","getBase64","files","val","disabled","aria-labelledby","dividers","gutterBottom","autoFocus","aria-describedby","websiteName","SocialShareBox","title","description","hashtag"],"mappings":"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","file":"static/js/35.a7e4d01b.chunk.js","sourcesContent":["import React, { useContext, useState, useEffect } from \"react\";\r\nimport {\r\n  makeStyles,\r\n  Typography,\r\n  Paper,\r\n  Grid,\r\n  TextField,\r\n  Box,\r\n  Button,\r\n  IconButton,\r\n  Hidden,\r\n} from \"@material-ui/core\";\r\nimport { AiOutlineSend } from \"react-icons/ai\";\r\nimport { BsEmojiLaughing } from \"react-icons/bs\";\r\nimport { FiSearch } from \"react-icons/fi\";\r\nimport { HiLink } from \"react-icons/hi\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport Menu from \"@material-ui/core/Menu\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport { FaEllipsisH } from \"react-icons/fa\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport { MdCancel } from \"react-icons/md\";\r\nimport { AuthContext } from \"src/context/Auth\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport Apiconfigs, { socketURL, websiteName } from \"src/ApiConfig/ApiConfig\";\r\nimport axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { getBase64, sortAddress } from \"src/utils\";\r\nimport moment from \"moment\";\r\nimport Picker from \"emoji-picker-react\";\r\nimport SocialShareBox from \"src/component/SocialShareBox\";\r\nimport CopyToClipboard from \"react-copy-to-clipboard\";\r\nimport DataLoading from \"src/component/DataLoading\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport CryptoJS from \"crypto-js\";\r\nimport ButtonCircularProgress from \"src/component/ButtonCircularProgress\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: \"25px\",\r\n    [theme.breakpoints.down(\"xs\")]: {\r\n      padding: \"10px\",\r\n    },\r\n  },\r\n  emojiBox: {\r\n    position: \"absolute\",\r\n    width: \"100%\",\r\n    bottom: \"100%\",\r\n    right: \"-65% !important\",\r\n    [theme.breakpoints.down(\"md\")]: {\r\n      right: \"-59% !important\",\r\n    },\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      right: \"-68% !important\",\r\n    },\r\n  },\r\n\r\n  menuShare: {\r\n    position: \"absolute\",\r\n    right: \"16px\",\r\n    top: \"16px\",\r\n    [theme.breakpoints.down(\"xs\")]: {\r\n      right: \"0px\",\r\n      top: \"0px\",\r\n    },\r\n  },\r\n\r\n  sharemodal: {\r\n    \"& button\": {\r\n      textAlign: \"center\",\r\n      \"& svg\": {\r\n        fontSize: \"25px\",\r\n      },\r\n    },\r\n  },\r\n\r\n  cancelBtn: {\r\n    position: \"absolute\",\r\n    top: 0,\r\n    right: 0,\r\n  },\r\n  box: {\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n    alignItems: \"center\",\r\n    padding: \"10px\",\r\n    borderRadius: \"10px\",\r\n    cursor: \"pointer\",\r\n\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      margin: 2,\r\n    },\r\n    \"& h6\": {\r\n      [theme.breakpoints.down(\"sm\")]: {\r\n        display: \"none\",\r\n      },\r\n    },\r\n    \"&:hover\": {\r\n      backgroundColor: \"#3F3D3D\",\r\n    },\r\n    \"@media(max-width:959px)\": {\r\n      \"&:hover\": {\r\n        \"& h6\": {\r\n          display: \"block\",\r\n        },\r\n      },\r\n    },\r\n    \"& .activeBoxs\": {\r\n      [theme.breakpoints.down(\"sm\")]: {\r\n        display: \"none\",\r\n      },\r\n    },\r\n  },\r\n  paper: {\r\n    backgroundColor: \"black\",\r\n    \"& .bodyBox\": {\r\n      height: \"60vh\",\r\n      overflowY: \"scroll\",\r\n      padding: \"15px\",\r\n      [theme.breakpoints.down(\"sm\")]: {\r\n        height: \"45vh\",\r\n      },\r\n    },\r\n    \"& .footerBox\": {\r\n      padding: \"15px\",\r\n      borderTop: \"1px solid #242526\",\r\n      position: \"relative\",\r\n      \"& button\": {\r\n        boxSizing: \"border-box\",\r\n        borderRadius: \"7px\",\r\n        width: \"100%\",\r\n        height: \"30px !important\",\r\n        width: \"30px !important\",\r\n        fontSize: \"25px\",\r\n        [theme.breakpoints.down(\"xs\")]: {\r\n          height: \"30px\",\r\n          fontSize: \"18px\",\r\n        },\r\n      },\r\n      \"& .linkBox\": {\r\n        position: \"relative\",\r\n        height: \"100%\",\r\n        width: \"50px\",\r\n        textAlign: \"center\",\r\n        \"& input\": {\r\n          position: \"absolute\",\r\n          width: \"100%\",\r\n          left: 0,\r\n          top: 0,\r\n          opacity: 0,\r\n          height: \"100%\",\r\n        },\r\n      },\r\n    },\r\n    \"& .headerbox\": {\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      padding: \"15px\",\r\n      \"& img\": {\r\n        width: \"50px\",\r\n        height: \"50px\",\r\n        borderRadius: \"50%\",\r\n        objectFit: \"cover\",\r\n\r\n        [theme.breakpoints.down(\"xs\")]: {\r\n          width: \"40px\",\r\n          height: \"40px\",\r\n        },\r\n      },\r\n    },\r\n    \"& .searchBox\": {\r\n      // display: \"flex\",\r\n      padding: \"10px\",\r\n    },\r\n  },\r\n  dot: {\r\n    width: \"10px\",\r\n    height: \"10px\",\r\n    borderRadius: \"50%\",\r\n    backgroundColor: \"green\",\r\n  },\r\n  outer: {\r\n    height: \"48px\",\r\n    width: \"100%\",\r\n    borderRadius: \"5px\",\r\n    backgroundColor: \"#373636\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    margin: 0,\r\n    [theme.breakpoints.down(\"xs\")]: {\r\n      height: \"30px\",\r\n    },\r\n  },\r\n  box1: {\r\n    display: \"flex\",\r\n    marginBottom: \"30px\",\r\n    \"& img\": {\r\n      borderRadius: \"50%\",\r\n      height: \"35px\",\r\n      width: \"35px\",\r\n      marginBottom: \"0px\",\r\n      [theme.breakpoints.down(\"xs\")]: {\r\n        height: \"30px\",\r\n        width: \"30px\",\r\n      },\r\n    },\r\n  },\r\n  mess: {\r\n    backgroundColor: \"#242526\",\r\n    padding: \"10px\",\r\n    borderRadius: \"10px 10px 0px 10px\",\r\n    position: \"relative\",\r\n    \"& small\": {\r\n      position: \"absolute\",\r\n      color: \"#BBB6B6\",\r\n      bottom: \"-18px\",\r\n      right: 0,\r\n      fontSize: \"10px\",\r\n    },\r\n    \"& button\": {\r\n      position: \"absolute\",\r\n      fontSize: \"22px\",\r\n      top: \"50%\",\r\n      opacity: 1,\r\n      left: \"-46px\",\r\n      transform: \"translateY(-50%)\",\r\n      width: \"40px\",\r\n    },\r\n  },\r\n  mess1: {\r\n    backgroundColor: \"#E31A89\",\r\n    padding: \"10px\",\r\n    borderRadius: \" 10px 10px 10px 0px\",\r\n    position: \"relative\",\r\n    \"& small\": {\r\n      position: \"absolute\",\r\n      color: \"#BBB6B6\",\r\n      bottom: \"-18px\",\r\n      left: 0,\r\n      fontSize: \"10px\",\r\n    },\r\n    \"& button\": {\r\n      position: \"absolute\",\r\n      fontSize: \"22px\",\r\n      top: \"50%\",\r\n      opacity: 1,\r\n      width: \"40px\",\r\n      right: \"-46px\",\r\n      transform: \"translateY(-50%)\",\r\n    },\r\n  },\r\n  chatLeftBox: {\r\n    overflowY: \"scroll\",\r\n    height: \"74vh\",\r\n    padding: \"10px\",\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      height: \"69vh\",\r\n    },\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      height: \"auto\",\r\n      display: \"flex\",\r\n      overflowX: \"scroll\",\r\n    },\r\n\r\n    \"& .textmsg\": {\r\n      fontSize: \"12px\",\r\n      color: \"#838282\",\r\n      width: \"100%\",\r\n      maxWidth: \"130px\",\r\n      overflow: \"hidden\",\r\n      fontWeight: \"300\",\r\n      textOverflow: \"ellipsis\",\r\n      whiteSpace: \"nowrap\",\r\n      [theme.breakpoints.down(\"sm\")]: {\r\n        display: \"none\",\r\n      },\r\n    },\r\n\r\n    \"& .chatBox\": {\r\n      minWidth: \"14px\",\r\n      height: \"14px\",\r\n      borderRadius: \"2px\",\r\n      backgroundColor: \"red\",\r\n      textAlign: \"center\",\r\n      width: \" 14px\",\r\n      fontSize: \"8px\",\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      justifyContent: \"center\",\r\n      [theme.breakpoints.down(\"sm\")]: {\r\n        position: \"absolute\",\r\n        top: 0,\r\n        left: 0,\r\n      },\r\n    },\r\n    \"& .statusBox\": {\r\n      height: \"10px\",\r\n      borderRadius: \"50%\",\r\n      width: \"10px\",\r\n      backgroundColor: \"#0AB506\",\r\n      [theme.breakpoints.down(\"sm\")]: {\r\n        position: \"absolute\",\r\n        top: 0,\r\n        left: 0,\r\n      },\r\n    },\r\n    \"& .chatprofile\": {\r\n      width: \"50px\",\r\n      height: \"50px\",\r\n      borderRadius: \"50%\",\r\n      position: \"relative\",\r\n\r\n      \"& img\": {\r\n        width: \"50px\",\r\n        height: \"50px\",\r\n        borderRadius: \"50%\",\r\n        objectFit: \"cover\",\r\n      },\r\n    },\r\n  },\r\n  chatimgBox: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n  },\r\n  chatimgBoxicon: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n  },\r\n  profilePic: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n  },\r\n  nameSection: {\r\n    marginLeft: \"16px\",\r\n    \"@media(max-width:959px)\": {\r\n      marginLeft: \"3px\",\r\n      \"&:hover\": {},\r\n    },\r\n  },\r\n}));\r\n\r\nconst StyledMenuItem = withStyles((theme) => ({\r\n  root: {\r\n    \"&:focus\": {\r\n      backgroundColor: theme.palette.primary.main,\r\n      \"& .MuiListItemIcon-root, & .MuiListItemText-primary\": {\r\n        color: theme.palette.common.white,\r\n      },\r\n    },\r\n  },\r\n}))(MenuItem);\r\nconst StyledMenu = withStyles({\r\n  paper: {\r\n    border: \"1px solid #484849 !important\",\r\n    backgroundColor: \"#101010 !important\",\r\n    minWidth: \"120px !important\",\r\n  },\r\n})((props) => (\r\n  <Menu\r\n    elevation={0}\r\n    getContentAnchorEl={null}\r\n    anchorOrigin={{\r\n      vertical: \"bottom\",\r\n      horizontal: \"center\",\r\n    }}\r\n    transformOrigin={{\r\n      vertical: \"top\",\r\n      horizontal: \"center\",\r\n    }}\r\n    {...props}\r\n  />\r\n));\r\n\r\n// const socket = window.io(\"https://node-social.mobiloitte.org/\");\r\n// const socket = window.io(socketURL);\r\n\r\nfunction isEmpty(obj) {\r\n  if (obj) {\r\n    return Object.keys(obj).length === 0;\r\n  } else {\r\n    return true;\r\n  }\r\n}\r\n\r\nfunction ChatList() {\r\n  const classes = useStyles();\r\n  const user = useContext(AuthContext);\r\n\r\n  console.log(\"user------\", user);\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n  const [selectedChat, setSelectedChat] = useState();\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [receiverId, setReceiverId] = useState(\"\");\r\n  const [showChatHistory, setShowChatHistory] = useState([]);\r\n  const [senderId, setSenderId] = useState(\"\");\r\n  const [onlineUsersList, setOnlineUsersList] = useState([]);\r\n  const [showChat1, setShowChat1] = useState({});\r\n\r\n  console.log(\"showChat1----\", showChat1);\r\n\r\n  const [showChat, setShowChat] = useState({});\r\n  const [newuserDetails, setNewuserDetails] = useState();\r\n  const [isNewLoading, setIsNewLoading] = useState(true);\r\n  const [image, setimage] = useState();\r\n  const [openSendImage, setOpenSendImage] = useState(false);\r\n  const [inputStr, setInputStr] = useState(\"\");\r\n  const [showPicker, setShowPicker] = useState(false);\r\n  const [open, setOpen] = React.useState(false);\r\n  const [openShare, setOpenShare] = React.useState(false);\r\n  const [searchUserName, setSearchUserName] = useState(\"\");\r\n  const [searchUserList, setSearchUserList] = useState([]);\r\n  console.log(\"searchUserList\", searchUserList);\r\n  const [checked, setChecked] = React.useState(undefined);\r\n  const [isUploadingData, setIsUploadingData] = useState(false);\r\n  const [showUser, setShowUser] = useState(false);\r\n  const [background, setBackground] = useState(true);\r\n\r\n  console.log(\"showUser----\", showUser);\r\n\r\n  useEffect(() => {\r\n    if (user.userData && user.chatMessageData) {\r\n      if (!isNewLoading) {\r\n        setSenderId(user.userData._id);\r\n      }\r\n      chatHistorygetSocket();\r\n      // onlineUser(user.userData._id);\r\n    }\r\n  }, [user.userData, newuserDetails, user.chatMessageData]);\r\n\r\n  useEffect(() => {\r\n    if (newuserDetails) {\r\n      // setSearchUserList([]);\r\n      setSearchUserName(\"\");\r\n    }\r\n  }, [newuserDetails]);\r\n\r\n  const chatHistorygetSocket = () => {\r\n    if (user.chatMessageData) {\r\n      let messageList = user.chatMessageData;\r\n      let checkNew = undefined;\r\n      if (newuserDetails) {\r\n        checkNew = messageList.filter(\r\n          (data) =>\r\n            data.senderId._id === newuserDetails._id ||\r\n            data.receiverId._id === newuserDetails._id\r\n        );\r\n        if (checkNew.length === 0) {\r\n          let obj = {\r\n            messages: [],\r\n            receiverId: user.userData,\r\n            senderId: newuserDetails,\r\n            unReadCount: 0,\r\n          };\r\n          messageList.splice(0, 0, obj);\r\n        }\r\n      }\r\n      if (newuserDetails) {\r\n        if (checkNew?.length > 0) {\r\n          setShowChat1(checkNew[0]);\r\n        } else {\r\n          setShowChat1(messageList[0]);\r\n        }\r\n      } else if (isEmpty(showChat1) && isEmpty(newuserDetails)) {\r\n        setShowChat1(messageList[0]);\r\n      } else if (!isEmpty(showChat1)) {\r\n        const lastChatData = user.chatMessageData.filter(\r\n          (data) => data._id === showChat1?._id\r\n        );\r\n        setShowChat1(lastChatData[0]);\r\n      }\r\n      setShowChatHistory(messageList);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n  useEffect(() => {\r\n    if (!isEmpty(showChat1)) {\r\n      setIsUploadingData(false);\r\n    }\r\n    return () => {\r\n      setIsUploadingData(true);\r\n    };\r\n  }, [showChat1]);\r\n\r\n  const encryptMessageHandler = async () => {\r\n    try {\r\n      const finalChatData = await Promise.all(\r\n        showChat1?.messages?.map(async (chat, i) => {\r\n          if (chat.mediaType == \"text\") {\r\n            let data = { ...chat };\r\n            const chatObj = chat.message;\r\n\r\n            const userIddd =\r\n              data?.receiverId == showChat1?.senderId._id\r\n                ? showChat1?.receiverId._id\r\n                : showChat1?.senderId._id;\r\n\r\n            const bytes = await CryptoJS.AES.decrypt(chatObj, userIddd);\r\n\r\n            const plaintext = await bytes.toString(CryptoJS.enc.Utf8);\r\n\r\n            data.message = plaintext;\r\n            return data;\r\n          } else {\r\n            return chat;\r\n          }\r\n        })\r\n      );\r\n\r\n      if (finalChatData) {\r\n        const encryptedChat = { ...showChat1, messages: finalChatData };\r\n        setShowChat(encryptedChat);\r\n      }\r\n    } catch (error) {}\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (showChat1) {\r\n      encryptMessageHandler();\r\n    }\r\n  }, [showChat1]);\r\n\r\n  const getoffLineUserApi = async () => {\r\n    try {\r\n      const res = await axios({\r\n        method: \"GET\",\r\n        url: Apiconfigs.offLineUser,\r\n        headers: {\r\n          token: window.localStorage.getItem(\"token\"),\r\n        },\r\n      });\r\n      if (res.data.responseCode === 200) {\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      getoffLineUserApi();\r\n    };\r\n  }, []);\r\n  // const onlineUser = (id) => {\r\n  //   if (id) {\r\n  //     socket.on(\"connect\", function () {\r\n  //       socket.emit(\"onlineUser\", { userId: id });\r\n  //       socket.on(\"onlineUser\", (event) => {\r\n  //         setOnlineUsersList(event);\r\n  //       });\r\n  //     });\r\n  //   } else {\r\n\r\n  //   }\r\n  // };\r\n\r\n  // const _onhandleChange = (e) => {\r\n  //   setSearchUserName({ ...data, [e.target.name]: e.target.value });\r\n  //   setShowUser(false)\r\n  // };\r\n\r\n  const getUserDetails = async (id) => {\r\n    try {\r\n      const res = await axios.get(Apiconfigs.getOtheruserprofile + id);\r\n      if (res.data.responseCode === 200) {\r\n        setNewuserDetails(res.data.result);\r\n      }\r\n      setIsNewLoading(false);\r\n    } catch (error) {\r\n      setIsNewLoading(false);\r\n    }\r\n  };\r\n  // const PerticularChat = () => {\r\n  //   socket.emit(\"viewChat\", { chatId: showChat1?._id });\r\n  //   socket.on(\"viewChat\", (message) => {\r\n  //     setShowChat1(message.result);\r\n  //   });\r\n  // };\r\n  const chatSend = async (chattext, isImage, event) => {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    setIsUploadingData(true);\r\n    if ((!chattext && receiverId) || receiverId.length > 5) {\r\n      const encryptedMessage = CryptoJS.AES.encrypt(\r\n        chattext,\r\n        user?.userData?._id\r\n      );\r\n      const chatdetails = {\r\n        senderId: senderId,\r\n        receiverId: receiverId,\r\n        message: isImage ? chattext : encryptedMessage.toString(),\r\n        mediaType: isImage ? \"image\" : \"\",\r\n      };\r\n      history.replace({\r\n        pathname: \"/chat-history\",\r\n        search: \"\",\r\n      });\r\n      axios({\r\n        method: \"POST\",\r\n        url: Apiconfigs.oneToOneChatApi,\r\n        data: chatdetails,\r\n        headers: {\r\n          \"content-type\": \"application/json\",\r\n        },\r\n      })\r\n        .then(async (response) => {\r\n          if (response?.data?.response_code === 200) {\r\n            setShowChat1();\r\n            setNewuserDetails();\r\n          } else {\r\n            // PerticularChat();\r\n          }\r\n          setShowPicker(false);\r\n          setInputStr(\"\");\r\n          setOpenSendImage(false);\r\n        })\r\n        .catch((error) => {\r\n          toast.error(\"Sorry, No Receiver found\");\r\n        });\r\n\r\n      // socket.emit(\"oneToOneChat\", chatdetails);\r\n      // if (newuserDetails) {\r\n      //   setShowChat1();\r\n      //   setNewuserDetails();\r\n      // } else {\r\n      //   PerticularChat();\r\n      // }\r\n      // setShowPicker(false);\r\n      // setInputStr(\"\");\r\n      // setOpenSendImage(false);\r\n    } else {\r\n      toast.error(\"Sorry, No Receiver found\");\r\n    }\r\n  };\r\n\r\n  const readChatHandler = async (id, cancelTokenSource) => {\r\n    try {\r\n      const res = await axios.get(Apiconfigs.readChat + id, {\r\n        cancelToken: cancelTokenSource && cancelTokenSource.token,\r\n        headers: {\r\n          token: window.localStorage.getItem(\"token\"),\r\n        },\r\n      });\r\n    } catch (error) {}\r\n  };\r\n\r\n  useEffect(() => {\r\n    const cancelTokenSource = axios.CancelToken.source();\r\n    if (!isEmpty(showChat1)) {\r\n      if (\r\n        showChat1 &&\r\n        showChat1.receiverId._id &&\r\n        showChat1.receiverId._id !== user.userData._id\r\n      ) {\r\n        setReceiverId(showChat1.receiverId._id);\r\n      } else if (\r\n        showChat1 &&\r\n        showChat1.senderId._id &&\r\n        showChat1.senderId._id !== user.userData._id\r\n      ) {\r\n        setReceiverId(showChat1.senderId._id);\r\n      }\r\n\r\n      if (showChat1 && showChat1._id && parseFloat(showChat1.unReadCount) > 0) {\r\n      }\r\n    }\r\n    return () => {\r\n      cancelTokenSource.cancel();\r\n    };\r\n  }, [showChat1]);\r\n\r\n  useEffect(() => {\r\n    if (location.search) {\r\n      const ids = location.search.split(\"?\");\r\n      if (ids[1]) {\r\n        getUserDetails(ids[1]);\r\n      } else {\r\n        setIsNewLoading(false);\r\n      }\r\n    } else {\r\n      setIsNewLoading(false);\r\n    }\r\n  }, [location]);\r\n\r\n  const changeChat = (chat) => {\r\n    setShowChat1(chat);\r\n\r\n    if (!newuserDetails) {\r\n      history.replace({\r\n        pathname: \"/chat-history\",\r\n        search: \"\",\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (showChat1?._id) {\r\n      readChatHandler(showChat1._id);\r\n    }\r\n  }, [showChat1?._id]);\r\n\r\n  const onEmojiClick = (event, emojiObject) => {\r\n    setInputStr((data) => data + emojiObject.emoji);\r\n  };\r\n\r\n  const creatorListHandler = async (cancelTokenSource) => {\r\n    try {\r\n      const res = await axios.get(\r\n        Apiconfigs.searchUserNameForsignUpTime,\r\n        {\r\n          cancelToken: cancelTokenSource && cancelTokenSource.token,\r\n          headers: {\r\n            token: window.localStorage.getItem(\"token\"),\r\n          },\r\n          params: {\r\n            search: searchUserName,\r\n          },\r\n        },\r\n        {\r\n          headers: {\r\n            token: window.localStorage.getItem(\"token\"),\r\n          },\r\n        }\r\n      );\r\n      if (res.data.responseCode === 200) {\r\n        if (res.data.result.docs) {\r\n          setSearchUserList(res.data.result.docs);\r\n          console.log(\"Newdata find\", res.data.result.docs);\r\n        }\r\n      } else {\r\n        setSearchUserList([]);\r\n      }\r\n    } catch (error) {\r\n      setSearchUserList([]);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const cancelTokenSource = axios.CancelToken.source();\r\n    if (searchUserName.length > 0) {\r\n      creatorListHandler(cancelTokenSource);\r\n    }\r\n    return () => {\r\n      cancelTokenSource.cancel();\r\n    };\r\n  }, [searchUserName]);\r\n\r\n  const disappearMessageHanlder = async () => {\r\n    try {\r\n      const res = await axios({\r\n        method: \"PUT\",\r\n        url: Apiconfigs.disappearUpdate,\r\n        data: {\r\n          disappear: checked,\r\n          time: 30,\r\n        },\r\n        headers: {\r\n          token: localStorage.getItem(\"token\"),\r\n        },\r\n      });\r\n      if (res.data.responseCode === 200) {\r\n      }\r\n    } catch (error) {}\r\n  };\r\n  useEffect(() => {\r\n    if (typeof checked !== \"undefined\") {\r\n      disappearMessageHanlder();\r\n    }\r\n  }, [checked]);\r\n\r\n  const disappearViewHandler = async () => {\r\n    try {\r\n      const res = await axios({\r\n        method: \"GET\",\r\n        url: Apiconfigs.disappearView,\r\n        headers: {\r\n          token: localStorage.getItem(\"token\"),\r\n        },\r\n      });\r\n      if (res.data.responseCode === 200) {\r\n        setChecked(res.data?.result?.disappear);\r\n      }\r\n    } catch (error) {}\r\n  };\r\n\r\n  useEffect(() => {\r\n    disappearViewHandler();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Paper className={classes.root}>\r\n        {isLoading ? (\r\n          <DataLoading />\r\n        ) : (\r\n          <Grid container spacing={2} style={{ alignItems: \"center\" }}>\r\n            <Grid item xs={12} sm={12} md={4} lg={4}>\r\n              <Paper className={classes.paper}>\r\n                <Box className=\"searchBox\">\r\n                  {\" \"}\r\n                  <div className={\"searchField customSearch\"}>\r\n                    <Grid container spacing={2}>\r\n                      <Grid item xs={9} sm={10}>\r\n                        <TextField\r\n                          variant=\"outlined\"\r\n                          fullWidth\r\n                          type=\"search\"\r\n                          onChange={(e) => {\r\n                            setSearchUserName(e.target.value);\r\n                            setShowUser(false);\r\n                          }}\r\n                          value={searchUserName}\r\n                          InputProps={{\r\n                            startAdornment: (\r\n                              <FiSearch\r\n                                position=\"start\"\r\n                                style={{ fontSize: \"18px\" }}\r\n                              />\r\n                            ),\r\n                          }}\r\n                        />\r\n\r\n                        {searchUserList && searchUserList.length > 0 && (\r\n                          <>\r\n                            {!showUser && (\r\n                              <SearchResults\r\n                                searchResult={searchUserList}\r\n                                setShowUser={setShowUser}\r\n                                history={history}\r\n                                setNewuserDetails={(details) =>\r\n                                  setNewuserDetails(details)\r\n                                }\r\n                              />\r\n                            )}\r\n                          </>\r\n                        )}\r\n                      </Grid>\r\n                      <Grid item xs={3} sm={2}>\r\n                        <Box className={classes.outer}>\r\n                          <Box className={classes.dot} />\r\n                        </Box>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </div>\r\n                </Box>\r\n                {/* USER LIST */}\r\n                <Box className={classes.chatLeftBox}>\r\n                  {showChatHistory &&\r\n                    showChatHistory.map((chat, i) => {\r\n                      console.log(\"chat------\", chat);\r\n                      return (\r\n                        <>\r\n                          {chat.receiverId &&\r\n                          chat.receiverId._id !== senderId ? (\r\n                            <Box\r\n                              key={i}\r\n                              className={classes.box}\r\n                              style={\r\n                                showChat1?._id == chat?._id\r\n                                  ? { background: \"#E31A89\" }\r\n                                  : {}\r\n                              }\r\n                              mb={2}\r\n                              onClick={() => {\r\n                                changeChat(chat);\r\n                              }}\r\n                            >\r\n                              <Box className={classes.profilePic}>\r\n                                <Box className=\"chatprofile\">\r\n                                  <img\r\n                                    src={\r\n                                      chat.receiverId &&\r\n                                      chat.receiverId.profilePic\r\n                                        ? chat.receiverId.profilePic\r\n                                        : \"images/Activity.png\"\r\n                                    }\r\n                                    style={{ borderRadius: \"50%\" }}\r\n                                  />\r\n                                  <Hidden only={[\"md\", \"lg\"]}>\r\n                                    <Box>\r\n                                      {chat.gray && (\r\n                                        <Box\r\n                                          className=\" statusBox\"\r\n                                          // gray\r\n                                          style={{ backgroundColor: \"#7D807D\" }}\r\n                                        ></Box>\r\n                                      )}\r\n                                      {chat.receiverId.isOnline == true ? (\r\n                                        <Box\r\n                                          // active\r\n                                          className=\" statusBox\"\r\n                                        ></Box>\r\n                                      ) : (\r\n                                        <Box\r\n                                          className=\" statusBox\"\r\n                                          // orange\r\n                                          style={{ backgroundColor: \"#EB9310\" }}\r\n                                        ></Box>\r\n                                      )}\r\n                                      {chat.unReadCount > 0 && (\r\n                                        <Box className=\" chatBox\">\r\n                                          {\" \"}\r\n                                          {chat.unReadCount}\r\n                                        </Box>\r\n                                      )}\r\n                                    </Box>\r\n                                  </Hidden>\r\n                                </Box>\r\n                                <Box className={classes.nameSection}>\r\n                                  <Typography variant=\"h6\">\r\n                                    {\" \"}\r\n                                    {chat?.receiverId?.userName\r\n                                      ? chat?.receiverId?.userName\r\n                                      : sortAddress(\r\n                                          chat?.receiverId?.bnbAccount?.address\r\n                                        )}\r\n                                  </Typography>\r\n                                </Box>\r\n                              </Box>\r\n                              <Box align=\"right\" className=\"activeBoxs\">\r\n                                <Typography\r\n                                  variant=\"body1\"\r\n                                  component=\"span\"\r\n                                  style={{ color: \"#BBB6B6\" }}\r\n                                >\r\n                                  {/* {chat?.time} */}\r\n                                </Typography>\r\n                                {chat.receiverId.isOnline ? (\r\n                                  <Box\r\n                                    // active\r\n                                    className=\" statusBox\"\r\n                                  ></Box>\r\n                                ) : (\r\n                                  <Box\r\n                                    className=\" statusBox\"\r\n                                    // orange\r\n                                    style={{ backgroundColor: \"#EB9310\" }}\r\n                                  ></Box>\r\n                                )}\r\n                                {chat.gray && (\r\n                                  <Box\r\n                                    className=\" statusBox\"\r\n                                    // gray\r\n                                    style={{ backgroundColor: \"#7D807D\" }}\r\n                                  ></Box>\r\n                                )}\r\n                                {chat.unReadCount > 0 && (\r\n                                  <Box className=\" chatBox\">\r\n                                    {\" \"}\r\n                                    {chat.unReadCount}\r\n                                  </Box>\r\n                                )}\r\n                              </Box>\r\n                            </Box>\r\n                          ) : (\r\n                            <Box\r\n                              className={classes.box}\r\n                              mb={2}\r\n                              style={\r\n                                showChat1?._id == chat?._id\r\n                                  ? { background: \"#E31A89\" }\r\n                                  : {}\r\n                              }\r\n                              onClick={() => {\r\n                                changeChat(chat);\r\n                              }}\r\n                            >\r\n                              <Box className={classes.chatimgBoxicon}>\r\n                                <Box className=\"chatprofile\">\r\n                                  <img\r\n                                    src={\r\n                                      chat.senderId && chat.senderId.profilePic\r\n                                        ? chat.senderId.profilePic\r\n                                        : \"images/Activity.png\"\r\n                                    }\r\n                                    style={{ borderRadius: \"50%\" }}\r\n                                  />\r\n                                  <Hidden only={[\"md\", \"lg\"]}>\r\n                                    <Box>\r\n                                      {chat.senderId.isOnline ? (\r\n                                        <Box\r\n                                          // active\r\n                                          className=\" statusBox\"\r\n                                        ></Box>\r\n                                      ) : (\r\n                                        <Box\r\n                                          className=\" statusBox\"\r\n                                          // orange\r\n                                          style={{ backgroundColor: \"#EB9310\" }}\r\n                                        ></Box>\r\n                                      )}\r\n\r\n                                      {chat.gray && (\r\n                                        <Box\r\n                                          className=\" statusBox\"\r\n                                          // gray\r\n                                          style={{ backgroundColor: \"#7D807D\" }}\r\n                                        ></Box>\r\n                                      )}\r\n                                      {chat.unReadCount > 0 && (\r\n                                        <Box className=\" chatBox\">\r\n                                          {\" \"}\r\n                                          {chat.unReadCount}\r\n                                        </Box>\r\n                                      )}\r\n                                    </Box>\r\n                                  </Hidden>\r\n                                </Box>\r\n                                <Box className={classes.nameSection}>\r\n                                  <Typography variant=\"h6\">\r\n                                    {\" \"}\r\n                                    {chat?.senderId?.userName\r\n                                      ? chat?.senderId?.userName\r\n                                      : sortAddress(\r\n                                          chat?.senderId?.bnbAccount?.address\r\n                                        )}\r\n                                  </Typography>\r\n                                </Box>\r\n                              </Box>\r\n                              <Box align=\"right\" className=\"activeBoxs\">\r\n                                <Typography\r\n                                  variant=\"body1\"\r\n                                  component=\"span\"\r\n                                  style={{ color: \"#BBB6B6\" }}\r\n                                ></Typography>\r\n\r\n                                {chat.senderId.isOnline ? (\r\n                                  <Box\r\n                                    // active\r\n                                    className=\" statusBox\"\r\n                                  ></Box>\r\n                                ) : (\r\n                                  <Box\r\n                                    // orange\r\n                                    className=\" statusBox\"\r\n                                    style={{ backgroundColor: \"#EB9310\" }}\r\n                                  ></Box>\r\n                                )}\r\n\r\n                                {chat.gray && (\r\n                                  <Box\r\n                                    // gray\r\n                                    className=\" statusBox\"\r\n                                    style={{ backgroundColor: \"#7D807D\" }}\r\n                                  ></Box>\r\n                                )}\r\n                                {chat.unReadCount > 0 && (\r\n                                  <Box className=\" chatBox\">\r\n                                    {\" \"}\r\n                                    {chat.unReadCount}\r\n                                  </Box>\r\n                                )}\r\n                                <Typography variant=\"h6\">\r\n                                  {\" \"}\r\n                                  {/* {chat?.senderId?.userName\r\n                                    ? chat?.senderId?.userName\r\n                                    : sortAddress(\r\n                                        chat?.senderId?.bnbAccount?.address\r\n                                      )} */}\r\n                                </Typography>\r\n                              </Box>\r\n                            </Box>\r\n                          )}\r\n                        </>\r\n                      );\r\n                    })}\r\n                </Box>\r\n              </Paper>\r\n            </Grid>\r\n            {/* RIGHT CHAT BAR */}\r\n            <Grid item xs={12} sm={12} md={8} lg={8}>\r\n              <Paper className={classes.paper}>\r\n                <Box style={{ borderBottom: \"1px solid #242526\" }}>\r\n                  <Grid container spacing={2} style={{ alignItems: \"center\" }}>\r\n                    <Grid item lg={6} sm={6} md={6} xs={6} align=\"left\">\r\n                      {showChat1?.receiverId?._id !== senderId ? (\r\n                        <Box className=\"headerbox\">\r\n                          <img\r\n                            src={\r\n                              showChat1?.receiverId?.profilePic\r\n                                ? showChat1?.receiverId?.profilePic\r\n                                : \"images/Activity.png\"\r\n                            }\r\n                          />\r\n                          <Box ml={2}>\r\n                            <Typography variant=\"h6\">\r\n                              {\" \"}\r\n                              {showChat1?.receiverId?.userName\r\n                                ? showChat1?.receiverId?.userName\r\n                                : sortAddress(\r\n                                    showChat1?.receiverId?.bnbAccount?.address\r\n                                  )}\r\n                            </Typography>\r\n                            {showChat1?.receiverId?.isOnline == true ? (\r\n                              <Box style={{ display: \"flex\" }}>\r\n                                <Typography>Active Now</Typography>\r\n                                <Box className={classes.dot} ml={1} mt={0.3} />\r\n                              </Box>\r\n                            ) : (\r\n                              <Box style={{ display: \"flex\" }}>\r\n                                <Typography>Offline</Typography>\r\n                              </Box>\r\n                            )}\r\n                          </Box>\r\n                        </Box>\r\n                      ) : (\r\n                        <Box className=\"headerbox\">\r\n                          <img\r\n                            src={\r\n                              showChat1?.senderId?.profilePic\r\n                                ? showChat1?.senderId?.profilePic\r\n                                : \"images/Activity.png\"\r\n                            }\r\n                          />\r\n                          <Box ml={2}>\r\n                            <Typography variant=\"h6\">\r\n                              {showChat1?.senderId?.userName\r\n                                ? showChat1?.senderId?.userName\r\n                                : sortAddress(\r\n                                    showChat1?.senderId?.bnbAccount?.address\r\n                                  )}\r\n                            </Typography>\r\n                            {showChat1?.senderId?.isOnline == true ? (\r\n                              <Box style={{ display: \"flex\" }}>\r\n                                <Typography>Active Now</Typography>\r\n                                <Box className={classes.dot} ml={1} mt={0.3} />\r\n                              </Box>\r\n                            ) : (\r\n                              <Box style={{ display: \"flex\" }}>\r\n                                <Typography>Offline</Typography>\r\n                              </Box>\r\n                            )}\r\n                          </Box>\r\n                        </Box>\r\n                      )}\r\n                    </Grid>\r\n                    {/* <Grid item lg={6} sm={6} md={6} xs={6} align=\"right\">\r\n                      <Box style={{ padding: \"20px\" }}>\r\n                        <Typography title=\"Is Disappear\">\r\n                          <Switch\r\n                            checked={checked}\r\n                            onChange={(event) => {\r\n                              setChecked(event.target.checked);\r\n                            }}\r\n                            inputProps={{ \"aria-label\": \"controlled\" }}\r\n                          />\r\n                        </Typography>\r\n                      </Box>\r\n                    </Grid> */}\r\n                  </Grid>\r\n                </Box>\r\n\r\n                <Box className=\"bodyBox\">\r\n                  <Box textAlign=\"center\" mt={2} mb={2}>\r\n                    {/* <Typography> {moment().format(\"MMMM DD, YYYY\")}</Typography> */}\r\n                  </Box>\r\n\r\n                  <>\r\n                    {showChat?.messages?.map((chat, i) => {\r\n                      return (\r\n                        <>\r\n                          {chat && (\r\n                            <>\r\n                              {chat.receiverId === senderId ? (\r\n                                <Box className={classes.box1} key={i}>\r\n                                  <Grid\r\n                                    container\r\n                                    spacing={2}\r\n                                    alignItems=\"flex-end\"\r\n                                  >\r\n                                    <Grid item lg={1} sm={1} md={1} xs={2}>\r\n                                      <img\r\n                                        src={\r\n                                          showChat.receiverId?.profilePic\r\n                                            ? showChat.receiverId?.profilePic\r\n                                            : \"images/Activity.png\"\r\n                                        }\r\n                                      />\r\n                                    </Grid>\r\n                                    <Grid item lg={8} sm={9} md={8} xs={8}>\r\n                                      <Box\r\n                                        style={{\r\n                                          display: \"flex\",\r\n                                          flexDirection: \"column\",\r\n                                        }}\r\n                                      >\r\n                                        <Box className={classes.mess1}>\r\n                                          {chat.mediaType === \"image\" ? (\r\n                                            <Box>\r\n                                              <img\r\n                                                src={chat.message}\r\n                                                style={{\r\n                                                  height: 100,\r\n                                                  width: 100,\r\n                                                  borderRadius: \"unset\",\r\n                                                }}\r\n                                              />\r\n                                            </Box>\r\n                                          ) : (\r\n                                            <Typography\r\n                                              variant=\"body1\"\r\n                                              style={{ wordBreak: \"break-all\" }}\r\n                                            >\r\n                                              {chat?.message}\r\n                                            </Typography>\r\n                                          )}\r\n                                          <Typography\r\n                                            variant=\"body1\"\r\n                                            component=\"small\"\r\n                                          >\r\n                                            {moment(chat?.createdAt)\r\n                                              .local()\r\n                                              .fromNow()}\r\n                                          </Typography>\r\n                                          <IconButton\r\n                                            onClick={(event) => {\r\n                                              setAnchorEl(event.currentTarget);\r\n                                              setSelectedChat(chat);\r\n                                            }}\r\n                                            aria-controls=\"customized-menu\"\r\n                                            aria-haspopup=\"true\"\r\n                                            className={classes.menuShare}\r\n                                          >\r\n                                            <FaEllipsisH />\r\n                                          </IconButton>\r\n                                          {anchorEl && selectedChat && (\r\n                                            <StyledMenuBox\r\n                                              anchorEl={anchorEl}\r\n                                              setAnchorEl={(data) =>\r\n                                                setAnchorEl(data)\r\n                                              }\r\n                                              chat={selectedChat}\r\n                                              setOpen={(data) => setOpen(data)}\r\n                                              setOpenShare={(data) =>\r\n                                                setOpenShare(data)\r\n                                              }\r\n                                            />\r\n                                          )}\r\n                                        </Box>\r\n                                      </Box>\r\n                                    </Grid>\r\n                                  </Grid>\r\n                                </Box>\r\n                              ) : (\r\n                                <Box className={classes.box1} key={i}>\r\n                                  <Grid\r\n                                    container\r\n                                    spacing={2}\r\n                                    alignItems=\"flex-end\"\r\n                                  >\r\n                                    <Grid\r\n                                      item\r\n                                      lg={3}\r\n                                      sm={2}\r\n                                      md={3}\r\n                                      xs={2}\r\n                                    ></Grid>\r\n                                    <Grid item lg={8} sm={9} md={8} xs={8}>\r\n                                      <Box\r\n                                        style={{\r\n                                          display: \"flex\",\r\n                                          flexDirection: \"column\",\r\n                                        }}\r\n                                      >\r\n                                        <Box className={classes.mess}>\r\n                                          {chat.mediaType === \"image\" ? (\r\n                                            <Box>\r\n                                              <img\r\n                                                src={chat.message}\r\n                                                style={{\r\n                                                  height: 100,\r\n                                                  width: 100,\r\n                                                  borderRadius: \"unset\",\r\n                                                }}\r\n                                              />\r\n                                            </Box>\r\n                                          ) : (\r\n                                            <Typography\r\n                                              variant=\"body1\"\r\n                                              style={{ wordBreak: \"break-all\" }}\r\n                                            >\r\n                                              {chat?.message}\r\n                                            </Typography>\r\n                                          )}\r\n                                          <Typography\r\n                                            variant=\"body1\"\r\n                                            component=\"small\"\r\n                                          >\r\n                                            {moment(chat?.createdAt)\r\n                                              .local()\r\n                                              .fromNow()}\r\n                                          </Typography>\r\n                                          <IconButton\r\n                                            onClick={(event) => {\r\n                                              setAnchorEl(event.currentTarget);\r\n                                              setSelectedChat(chat);\r\n                                            }}\r\n                                            aria-controls=\"customized-menu\"\r\n                                            aria-haspopup=\"true\"\r\n                                            className={classes.menuShare}\r\n                                          >\r\n                                            <FaEllipsisH />\r\n                                          </IconButton>\r\n                                          {anchorEl && selectedChat && (\r\n                                            <StyledMenuBox\r\n                                              anchorEl={anchorEl}\r\n                                              setAnchorEl={(data) =>\r\n                                                setAnchorEl(data)\r\n                                              }\r\n                                              chat={selectedChat}\r\n                                              setOpen={(data) => setOpen(data)}\r\n                                              setOpenShare={(data) =>\r\n                                                setOpenShare(data)\r\n                                              }\r\n                                            />\r\n                                          )}\r\n                                        </Box>\r\n                                      </Box>\r\n                                    </Grid>\r\n                                    <Grid\r\n                                      item\r\n                                      lg={1}\r\n                                      sm={1}\r\n                                      md={1}\r\n                                      xs={2}\r\n                                      align=\"right\"\r\n                                    >\r\n                                      <img\r\n                                        src={\r\n                                          showChat.senderId?.profilePic\r\n                                            ? showChat.senderId?.profilePic\r\n                                            : \"images/Activity.png\"\r\n                                        }\r\n                                      />\r\n                                    </Grid>\r\n                                  </Grid>\r\n                                </Box>\r\n                              )}\r\n                            </>\r\n                          )}\r\n                        </>\r\n                      );\r\n                    })}\r\n                  </>\r\n                </Box>\r\n                <form\r\n                  onSubmit={(event) => {\r\n                    if (image) {\r\n                      chatSend(image, true, event);\r\n\r\n                      setTimeout(() => {\r\n                        setimage();\r\n                      }, 100);\r\n                    } else {\r\n                      chatSend(inputStr, false, event);\r\n                    }\r\n                  }}\r\n                >\r\n                  <Box className=\"footerBox\">\r\n                    <Grid\r\n                      container\r\n                      spacing={2}\r\n                      style={{ alignItems: \"center\" }}\r\n                    >\r\n                      {showPicker && (\r\n                        <Box className={classes.emojiBox}>\r\n                          <Picker onEmojiClick={onEmojiClick} />\r\n                        </Box>\r\n                      )}\r\n                      <Grid item xs={9} sm={11}>\r\n                        <Box>\r\n                          <TextField\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            placeholder=\"Type something here....\"\r\n                            onChange={(e) => setInputStr(e.target.value)}\r\n                            value={inputStr}\r\n                            // disabled={image ? true : false}\r\n                            InputProps={{\r\n                              endAdornment: (\r\n                                <Box\r\n                                  style={{\r\n                                    display: \"flex\",\r\n                                    alignItems: \"center\",\r\n                                  }}\r\n                                >\r\n                                  <Box className=\"linkBox\">\r\n                                    {\" \"}\r\n                                    <HiLink style={{ fontSize: \"20px\" }} />{\" \"}\r\n                                    <input\r\n                                      type=\"file\"\r\n                                      accept=\"image/*\"\r\n                                      onChange={(e) => {\r\n                                        getBase64(\r\n                                          e.target.files[0],\r\n                                          (result) => {\r\n                                            setimage(result);\r\n                                            setOpenSendImage(true);\r\n                                          }\r\n                                        );\r\n                                      }}\r\n                                    />\r\n                                  </Box>\r\n                                  <BsEmojiLaughing\r\n                                    position=\"end\"\r\n                                    style={{\r\n                                      fontSize: \"20px\",\r\n                                      cursor: \"pointer\",\r\n                                    }}\r\n                                    onClick={() => setShowPicker((val) => !val)}\r\n                                  />\r\n                                </Box>\r\n                              ),\r\n                            }}\r\n                          />\r\n                        </Box>\r\n                      </Grid>\r\n                      <Grid item xs={3} sm={1}>\r\n                        <Button\r\n                          type=\"submit\"\r\n                          disabled={!inputStr}\r\n                          // onClick={() => {\r\n                          //   if (image) {\r\n                          //     chatSend(image, true);\r\n\r\n                          //     setTimeout(() => {\r\n                          //       setimage();\r\n                          //     }, 100);\r\n                          //   } else {\r\n                          //     chatSend(inputStr, false);\r\n                          //   }\r\n                          // }}\r\n                        >\r\n                          <AiOutlineSend />\r\n                          {isUploadingData && <ButtonCircularProgress />}\r\n                        </Button>\r\n                      </Grid>\r\n                    </Grid>{\" \"}\r\n                  </Box>\r\n                </form>\r\n              </Paper>\r\n            </Grid>\r\n          </Grid>\r\n        )}\r\n        {/* Send Image */}\r\n        <Dialog aria-labelledby=\"customized-dialog-title\" open={openSendImage}>\r\n          <DialogTitle\r\n            id=\"customized-dialog-title\"\r\n            onClose={() => setOpenSendImage(false)}\r\n          >\r\n            Send Image\r\n          </DialogTitle>\r\n          <DialogContent dividers>\r\n            <Typography gutterBottom>\r\n              {image ? (\r\n                <Box className=\"right-Box\">\r\n                  <Box>\r\n                    <img src={image} width=\"100%\" />\r\n                  </Box>\r\n                </Box>\r\n              ) : (\r\n                \"\"\r\n              )}\r\n            </Typography>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button\r\n              autoFocus\r\n              onClick={() => {\r\n                setOpenSendImage(false);\r\n                setimage(\"\");\r\n              }}\r\n              color=\"primary\"\r\n            >\r\n              Cancel\r\n            </Button>\r\n            <Button\r\n              autoFocus\r\n              onClick={(event) => {\r\n                if (image) {\r\n                  chatSend(image, true, event);\r\n\r\n                  setTimeout(() => {\r\n                    setimage();\r\n                  }, 100);\r\n                }\r\n              }}\r\n              color=\"primary\"\r\n            >\r\n              Send{image ? \" it\" : \"\"}\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n\r\n        <Dialog\r\n          open={openShare}\r\n          onClose={() => setOpenShare(false)}\r\n          aria-labelledby=\"alert-dialog-title\"\r\n          aria-describedby=\"alert-dialog-description\"\r\n          maxWidth=\"xs\"\r\n          fullWidth\r\n        >\r\n          <DialogTitle id=\"alert-dialog-title\">{\"Share Post\"}</DialogTitle>\r\n          <DialogContent>\r\n            <IconButton\r\n              className={classes.cancelBtn}\r\n              onClick={() => setOpenShare(false)}\r\n            >\r\n              <MdCancel />\r\n            </IconButton>\r\n            <SocialShareBox url={websiteName} />\r\n          </DialogContent>\r\n        </Dialog>\r\n\r\n        <Dialog\r\n          open={open}\r\n          onClose={() => {\r\n            setAnchorEl(null);\r\n          }}\r\n          aria-labelledby=\"alert-dialog-title\"\r\n          aria-describedby=\"alert-dialog-description\"\r\n          maxWidth=\"xs\"\r\n          fullWidth\r\n        >\r\n          <DialogTitle id=\"alert-dialog-title\">{\"Block this user\"}</DialogTitle>\r\n          <DialogContent>\r\n            <DialogContentText id=\"alert-dialog-description\" align=\"center\">\r\n              Are you sure you want to <br /> Block this user?\r\n            </DialogContentText>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button\r\n              onClick={() => {\r\n                setOpen(false);\r\n              }}\r\n              color=\"primary\"\r\n            >\r\n              Disagree\r\n            </Button>\r\n            <Button\r\n              onClick={() => {\r\n                setOpen(false);\r\n              }}\r\n              color=\"primary\"\r\n              autoFocus\r\n            >\r\n              Agree\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      </Paper>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ChatList;\r\n\r\nexport function StyledMenuBox({\r\n  anchorEl,\r\n  setAnchorEl,\r\n  chat,\r\n  setOpen,\r\n  setOpenShare,\r\n}) {\r\n  return (\r\n    <StyledMenu\r\n      id=\"customized-menu\"\r\n      anchorEl={anchorEl}\r\n      keepMounted\r\n      open={Boolean(anchorEl)}\r\n      onClose={() => {\r\n        setAnchorEl(null);\r\n      }}\r\n    >\r\n      {chat.mediaType === \"text\" && (\r\n        <StyledMenuItem\r\n          onClick={() => {\r\n            setAnchorEl(null);\r\n          }}\r\n        >\r\n          <CopyToClipboard text={chat?.message}>\r\n            <ListItemText\r\n              primary=\"Copy\"\r\n              onClick={() => toast.success(\"Copied\")}\r\n            />\r\n          </CopyToClipboard>\r\n        </StyledMenuItem>\r\n      )}\r\n    </StyledMenu>\r\n  );\r\n}\r\n\r\nexport function SearchResults({ searchResult, history, setShowUser }) {\r\n  return (\r\n    <ul className=\"list-group text-dark\" id=\"search-list\">\r\n      {searchResult?.length > 0 && (\r\n        <>\r\n          {searchResult?.map((data, i) => {\r\n            console.log(\"data--nwe-chat\", data);\r\n            return (\r\n              <li\r\n                key={i}\r\n                className=\"list-group-item\"\r\n                style={{ textAlign: \"left\", zIndex: 999 }}\r\n                onClick={() => {\r\n                  history.push({\r\n                    pathname: \"/chat-history\",\r\n                    search: data._id,\r\n                  });\r\n                  setShowUser(true);\r\n                }}\r\n              >\r\n                <Box display={\"flex\"} justifyContent=\"space-between\">\r\n                  <Box display={\"flex\"}>\r\n                    <img\r\n                      src={\r\n                        data.profilePic\r\n                          ? data.profilePic\r\n                          : \"images/Activity.png\"\r\n                      }\r\n                      alt=\"\"\r\n                    />\r\n                    <Typography>\r\n                      {\" \"}\r\n                      {data.userName ? data.userName : data.name}\r\n                    </Typography>\r\n                  </Box>\r\n                </Box>\r\n              </li>\r\n            );\r\n          })}\r\n        </>\r\n      )}\r\n    </ul>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport {\r\n  FacebookShareButton,\r\n  TelegramShareButton,\r\n  TwitterShareButton,\r\n  InstapaperShareButton,\r\n} from \"react-share\";\r\n\r\nimport { Box, Button } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\n\r\nimport { BsFacebook } from \"react-icons/bs\";\r\nimport { AiFillInstagram } from \"react-icons/ai\";\r\nimport { RiSendPlaneFill } from \"react-icons/ri\";\r\nimport { AiFillTwitterCircle } from \"react-icons/ai\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  sharemodal: {\r\n    \"& button\": {\r\n      textAlign: \"center\",\r\n      \"& svg\": {\r\n        fontSize: \"25px\",\r\n      },\r\n    },\r\n  },\r\n}));\r\nexport default function SocialShareBox({ url }) {\r\n  const classes = useStyles();\r\n  return (\r\n    <Box className={classes.sharemodal} align='center' mt={3} mb={2}>\r\n      <FacebookShareButton url={url} target='_blank'>\r\n        <Button>\r\n          <Box>\r\n            <BsFacebook /> <br />\r\n            Facebook\r\n          </Box>\r\n        </Button>\r\n      </FacebookShareButton>\r\n      <InstapaperShareButton url={url} title={`frontend`} description=''>\r\n        <Button>\r\n          <Box>\r\n            <AiFillInstagram /> <br />\r\n            Instagram\r\n          </Box>\r\n        </Button>\r\n      </InstapaperShareButton>\r\n      <TelegramShareButton\r\n        url={url}\r\n        title={\"CampersTribe - World is yours to explore\"}\r\n      >\r\n        <Button>\r\n          <Box>\r\n            <RiSendPlaneFill /> <br />\r\n            Telegram\r\n          </Box>\r\n        </Button>\r\n      </TelegramShareButton>\r\n\r\n      <TwitterShareButton url={url} title={`frontend`} hashtag='#camperstribe'>\r\n        <Button>\r\n          <Box>\r\n            <AiFillTwitterCircle /> <br />\r\n            Twitter\r\n          </Box>\r\n        </Button>\r\n      </TwitterShareButton>\r\n    </Box>\r\n  );\r\n}\r\n"],"sourceRoot":""}