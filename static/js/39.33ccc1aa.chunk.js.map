{"version":3,"sources":["views/pages/StaticContent/AddStatic.js","component/Page.js"],"names":["useStyles","makeStyles","theme","root","padding","formBox","position","background","borderRadius","marginTop","marginBottom","formValidationSchema","yep","shape","subject","required","min","max","matches","description","AddStatic","classes","useHistory","useState","isLoading","setIsLoading","btnText","setBtnText","auth","useContext","AuthContext","userData","userId","FormHandleSubmit","firstName","lastName","email","imageUrl","values","a","axios","method","url","ApiConfig","addStaticContent","data","type","title","status","toast","success","error","message","className","variant","color","maxWidth","initialValues","supportType","initialStatus","successMsg","validationSchema","onSubmit","resetForm","errors","handleBlur","handleChange","touched","handleSubmit","setFieldValue","container","spacing","direction","item","xs","md","mt","placeholder","size","fullWidth","name","value","Boolean","onBlur","onChange","style","margin","fontSize","maxRows","Scroll","align","disabled","Page","props","children"],"mappings":"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","file":"static/js/39.33ccc1aa.chunk.js","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\r\nimport {\r\n  Button,\r\n  Box,\r\n  TextField,\r\n  Grid,\r\n  Typography,\r\n  makeStyles,\r\n  FormHelperText,\r\n  Paper,\r\n  Container,\r\n} from \"@material-ui/core\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport Page from \"src/component/Page\";\r\nimport { Form, Formik } from \"formik\";\r\nimport { AuthContext } from \"src/context/Auth\";\r\nimport { toast } from \"react-toastify\";\r\nimport { useHistory, Link as RouterComponent } from \"react-router-dom\";\r\nimport ButtonCircularProgress from \"src/component/ButtonCircularProgress\";\r\nimport * as yep from \"yup\";\r\nimport ApiConfig from \"src/ApiConfig/ApiConfig\";\r\nimport axios from \"axios\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: \"15px\",\r\n  },\r\n  formBox: {\r\n    padding: \"15px\",\r\n    position: \"relative\",\r\n    background: \"#000\",\r\n    borderRadius: \"10px\",\r\n    marginTop: \"30px\",\r\n    marginBottom: \"15px\",\r\n  },\r\n}));\r\n\r\nconst formValidationSchema = yep.object().shape({\r\n  subject: yep\r\n    .string()\r\n    .required(\" Subject is required\")\r\n    .min(2, \"Please enter atleast 2 characters\")\r\n    .max(35, \"You can enter only 35 characters\")\r\n    .matches(\r\n      /^[a-zA-ZàáâäãåąčćęèéêëėįìíîïłńòóôöõøùúûüųūÿýżźñçčšžÀÁÂÄÃÅĄĆČĖĘÈÉÊËÌÍÎÏĮŁŃÒÓÔÖÕØÙÚÛÜŲŪŸÝŻŹÑßÇŒÆČŠŽ∂ð ,.'-]+$/,\r\n      \"Only alphabets and whitespaces are allowed for this field number are not. \"\r\n    ),\r\n  description: yep\r\n    .string()\r\n    .required(\" Message is required\")\r\n    .min(2, \"Please enter atleast 2 characters\")\r\n    .max(750, \"You can enter only 750 characters\"),\r\n});\r\n\r\nexport default function AddStatic() {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [btnText, setBtnText] = useState(\"SUBMIT\");\r\n  const [uploadImageLoading, setUploadImageLoading] = useState(false);\r\n  const [imgLoader, setImgLoader] = useState(false);\r\n  const auth = useContext(AuthContext);\r\n  const userIdd = auth?.userData?.userId;\r\n  const [imageFront, setImageFront] = useState(\"\");\r\n  const userName =\r\n    `${auth.userData?.firstName}` + \" \" + `${auth.userData?.lastName}`;\r\n  const userEmail = auth.userData?.email;\r\n  const userImage = auth.userData?.imageUrl;\r\n\r\n  const formInitialValue = {\r\n    supportType: \"\",\r\n    imageUrl: \"\",\r\n    subject: \"\",\r\n    description: \"\",\r\n  };\r\n\r\n  const FormHandleSubmit = async (values) => {\r\n    setIsLoading(true);\r\n    try {\r\n      const res = await axios({\r\n        method: \"POST\",\r\n        url: ApiConfig.addStaticContent,\r\n        data: {\r\n          //   subject: values.subject,\r\n          //   description: values.description,\r\n          type: \"string\",\r\n          title: \"string\",\r\n          description: \"string\",\r\n        },\r\n      });\r\n      if (res.data.status === 200) {\r\n        setBtnText(\"SUBMIT\");\r\n        toast.success(\"Your request has been sent successfully\");\r\n        setIsLoading(false);\r\n      }\r\n    } catch (error) {\r\n      toast.error(error.message);\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Page title=\"Add Static Content\">\r\n      <Paper className={classes.root}>\r\n        <Box>\r\n          <Typography variant=\"h3\" color=\"primary.main\">\r\n            Add Static Content\r\n          </Typography>\r\n        </Box>\r\n        <Container maxWidth=\"md\">\r\n          <Box className={classes.formBox}>\r\n            <Formik\r\n              initialValues={formInitialValue}\r\n              initialStatus={{\r\n                success: false,\r\n                successMsg: \"\",\r\n              }}\r\n              validationSchema={formValidationSchema}\r\n              onSubmit={(values, { resetForm }) => {\r\n                FormHandleSubmit(values);\r\n                resetForm();\r\n              }}\r\n            >\r\n              {({\r\n                errors,\r\n                handleBlur,\r\n                handleChange,\r\n                handleSubmit,\r\n                touched,\r\n                values,\r\n                setFieldValue,\r\n              }) => (\r\n                <Form>\r\n                  <Grid container spacing={2} direction={\"column\"}>\r\n                    <Grid item xs={12} md={12}>\r\n                      <label>\r\n                        Title<sup>*</sup>\r\n                      </label>\r\n                      <Box mt={1}>\r\n                        <TextField\r\n                          placeholder=\"Enter Subject\"\r\n                          type=\"text\"\r\n                          size=\"small\"\r\n                          variant=\"outlined\"\r\n                          fullWidth\r\n                          name=\"subject\"\r\n                          value={values.subject}\r\n                          error={Boolean(touched.subject && errors.subject)}\r\n                          onBlur={handleBlur}\r\n                          onChange={handleChange}\r\n                        />\r\n                        <FormHelperText\r\n                          error\r\n                          style={{ margin: \"0px\", fontSize: \"12px\" }}\r\n                        >\r\n                          {touched.subject && errors.subject}\r\n                        </FormHelperText>\r\n                      </Box>\r\n                    </Grid>\r\n                    <Grid item xs={12} md={12}>\r\n                      <label>\r\n                        Description<sup>*</sup>\r\n                      </label>\r\n                      <Box mt={1}>\r\n                        <TextField\r\n                          placeholder=\"Enter your message\"\r\n                          type=\"text\"\r\n                          size=\"small\"\r\n                          variant=\"outlined\"\r\n                          //  multiline\r\n                          fullWidth\r\n                          maxRows={4}\r\n                          Scroll=\"auto\"\r\n                          name=\"description\"\r\n                          className={classes.description}\r\n                          value={values.description}\r\n                          error={Boolean(\r\n                            touched.description && errors.description\r\n                          )}\r\n                          onBlur={handleBlur}\r\n                          onChange={handleChange}\r\n                        />\r\n                        <FormHelperText\r\n                          error\r\n                          style={{ margin: \"0px\", fontSize: \"12px\" }}\r\n                        >\r\n                          {touched.description && errors.description}\r\n                        </FormHelperText>\r\n                      </Box>\r\n                    </Grid>\r\n                    <Grid item xs={12} align=\"center\">\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        color=\"secondary\"\r\n                        type=\"submit\"\r\n                        size=\"large\"\r\n                        disabled={isLoading}\r\n                      >\r\n                        {btnText} {isLoading && <ButtonCircularProgress />}\r\n                      </Button>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Form>\r\n              )}\r\n            </Formik>\r\n          </Box>\r\n        </Container>\r\n      </Paper>\r\n    </Page>\r\n  );\r\n}\r\n","import { Container } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\nexport default function Page(props) {\r\n  const { title, children } = props;\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>{title}</title>\r\n      </Helmet>\r\n      <Container>{children}</Container>\r\n    </>\r\n  );\r\n}\r\n"],"sourceRoot":""}