{"version":3,"sources":["../node_modules/@material-ui/icons/ChevronLeft.js","views/auth/forget-password/index.js","component/Page.js"],"names":["_interopRequireDefault","require","_interopRequireWildcard","Object","defineProperty","exports","value","default","React","_default","createElement","d","useStyles","makeStyles","theme","get","alignItems","textAlign","marginTop","marginBottom","loginBox","padding","donation","fontSize","cursor","backgroundColor","borderRadius","Forgetassword","props","classes","history","useHistory","useState","isLoading","setIsLoading","errorMessage","setErrorMesage","endTime","setEndtime","verifyOTPOpen","setVerifyOTPOpen","emailOtp","setEmail","errorMessageresend","setErrorMesageResend","mobileNumber","setMobileNumber","isLoadingresend","setIsLoadingResend","isloading","timeLeft","setTimeLeft","checked1","setChecked1","checked2","setChecked2","isSubmit","setIsSubmit","console","log","countryCode","setCountryCode","email","formValue","formInitialSchema","isValidNumber","test","formValidationSchema","yup","shape","required","matches","verifyOTP","values","a","axios","method","url","ApiConfig","verifyOtp","data","otp","res","responseCode","setTimeout","responseMessage","toast","success","localStorage","setItem","result","push","response","resendOTP","resendOtp","moment","add","unix","formValidationSchemaOtp","max","useEffect","timer","calculateTimeLeft","clearTimeout","title","maxWidth","mt","mb","variant","style","color","className","elevation","item","xs","marginRight","onClick","initialValues","initialStatus","successMsg","validationSchema","onSubmit","forgotPassword","slice","length","window","sessionStorage","errors","handleBlur","handleChange","touched","handleSubmit","isSubmitting","container","direction","spacing","fullWidth","type","size","name","placeholder","error","Boolean","String","toLowerCase","onBlur","onChange","InputProps","startAdornment","position","country","phone","e","dialCode","inputStyle","width","height","border","ml","fontWeight","disabled","component","RouterComponent","to","display","justifyContent","textDecoration","open","DateOfBirth","maxLength","onKeyPress","event","key","preventDefault","seconds","minutes","align","Page","children"],"mappings":"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","file":"static/js/31.6364edf2.chunk.js","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\"\n}), 'ChevronLeft');\n\nexports.default = _default;","import React, { useState, useEffect } from \"react\";\r\nimport \"src/scss/main.css\";\r\nimport MailOutlineIcon from \"@material-ui/icons/MailOutline\";\r\nimport {\r\n  Typography,\r\n  Button,\r\n  Box,\r\n  Paper,\r\n  TextField,\r\n  Link,\r\n  makeStyles,\r\n  Grid,\r\n  Container,\r\n  FormControl,\r\n  FormHelperText,\r\n  OutlinedInput,\r\n} from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport * as yup from \"yup\";\r\nimport moment from \"moment\";\r\nimport Page from \"src/component/Page\";\r\nimport { toast } from \"react-toastify\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport ApiConfig from \"src/ApiConfig/ApiConfig\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\r\nimport { Formik, ErrorMessage, Form, useFormik } from \"formik\";\r\nimport { useHistory, Link as RouterComponent } from \"react-router-dom\";\r\nimport ButtonCircularProgress from \"src/component/ButtonCircularProgress\";\r\nimport { calculateTimeLeft, tokenName } from \"src/utils\";\r\nimport PhoneInput from \"react-phone-input-2\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  get: {\r\n    alignItems: \"center\",\r\n    textAlign: \"center\",\r\n    marginTop: \"5rem\",\r\n    marginBottom: \"1rem\",\r\n  },\r\n  loginBox: {\r\n    padding: \"40px 30px\",\r\n  },\r\n  donation: {\r\n    \"& span\": {\r\n      fontSize: \"12px\",\r\n      padding: \"2px 5px\",\r\n      // border: \"1px solid #e31a89\",\r\n      cursor: \"pointer\",\r\n      \"&.active\": {\r\n        backgroundColor: \"#e31a89\",\r\n        borderRadius: \"7px\",\r\n      },\r\n    },\r\n  },\r\n}));\r\n\r\n// const initialValues = {\r\n//   email: \"\",\r\n// };\r\n\r\n// const validationSchema = yup.object({\r\n//   email: yup.string().email().required(\"Required\"),\r\n// });\r\n\r\nfunction Forgetassword(props) {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const [isLoading, setIsLoading] = useState();\r\n  const [errorMessage, setErrorMesage] = useState(\"\");\r\n  const [endTime, setEndtime] = React.useState();\r\n  const [verifyOTPOpen, setVerifyOTPOpen] = useState(false);\r\n  const [emailOtp, setEmail] = React.useState();\r\n  const [errorMessageresend, setErrorMesageResend] = useState();\r\n  const [mobileNumber, setMobileNumber] = useState(\"\");\r\n  const [isLoadingresend, setIsLoadingResend] = useState(false);\r\n  const [isloading, setIsloading] = React.useState(false);\r\n  const [timeLeft, setTimeLeft] = useState();\r\n  const [checked1, setChecked1] = useState(true);\r\n  const [checked2, setChecked2] = useState(false);\r\n  const [isSubmit, setIsSubmit] = useState(false);\r\n  console.log(\"emailOtp\", emailOtp, mobileNumber);\r\n  const [countryCode, setCountryCode] = useState(\"\");\r\n  const [formValue, setFormValue] = useState({\r\n    email: \"\",\r\n  });\r\n\r\n  const formInitialSchema = {\r\n    email: \"\",\r\n    mobileNumber: \"\",\r\n  };\r\n  console.log(\"errorMessage\", errorMessage);\r\n\r\n  const isValidEmail = (value) => {\r\n    const re =\r\n      /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/; // eslint-disable-line no-useless-escape\r\n    return re.test(String(value).toLowerCase());\r\n  };\r\n\r\n  const isValidNumber = (value) => {\r\n    const re =\r\n      /^(?:(?:\\+|0{0,2})91(\\s*|[\\-])?|[0]?)?([6789]\\d{2}([ -]?)\\d{3}([ -]?)\\d{4})$/;\r\n    return re.test(value);\r\n  };\r\n  const formValidationSchema = yup.object().shape(\r\n    checked1\r\n      ? {\r\n        email: yup\r\n          .string()\r\n          .email(\r\n            \"You have entered an invalid email address. Please try again\"\r\n          )\r\n          .required(\"Email address is required\")\r\n          .matches(\"^[a-zA-Z0-9+_.-]+@[a-zA-Z0-9.-]+$\"),\r\n      }\r\n      : {}\r\n  );\r\n\r\n  const verifyOTP = async (values) => {\r\n    setIsLoading(true);\r\n    try {\r\n      const res = await axios({\r\n        method: \"PUT\",\r\n        url: ApiConfig.verifyOtp,\r\n        data: {\r\n          otp: values.otp,\r\n          email: emailOtp,\r\n        },\r\n      });\r\n      if (res.data.responseCode === 200) {\r\n        setIsLoading(false);\r\n        setTimeout(() => {\r\n          setErrorMesageResend(\"\"); // count is 0 here\r\n        }, 5000);\r\n        setErrorMesageResend(res.data?.responseMessage);\r\n        toast.success(`${res.data.responseMessage} please login`);\r\n        localStorage.setItem(\"email\", res.data?.result.email);\r\n\r\n        history.push(\"/reset-password\");\r\n        // window.sessionStorage.setItem(\"otp\", values.otp);\r\n      }\r\n    } catch (error) {\r\n      setIsLoading(false);\r\n      // toast.error(error.message);\r\n      // toast.error(error.response.data.responseMessage);\r\n      setTimeout(() => {\r\n        setErrorMesage(\"\"); // count is 0 here\r\n      }, 5000);\r\n      setErrorMesage(error?.response?.data?.responseMessage);\r\n    }\r\n  };\r\n  const resendOTP = async () => {\r\n    setIsLoadingResend(true);\r\n    try {\r\n      const res = await axios({\r\n        method: \"POST\",\r\n        url: ApiConfig.resendOtp,\r\n        data: {\r\n          email: emailOtp,\r\n        },\r\n      });\r\n      if (res.data.responseCode === 200) {\r\n        setIsLoadingResend(false);\r\n        setEndtime(moment().add(5, \"m\").unix());\r\n        setIsLoading(false);\r\n\r\n        setTimeout(() => {\r\n          setErrorMesageResend(\"\"); // count is 0 here\r\n        }, 5000);\r\n        setErrorMesageResend(res.data?.responseMessage);\r\n        toast.success(\"resend otp succefully\");\r\n      }\r\n    } catch (error) {\r\n      setIsLoadingResend(false);\r\n      setIsLoading(false);\r\n      // toast.error(error.message);\r\n      setTimeout(() => {\r\n        setErrorMesage(\"\"); // count is 0 here\r\n      }, 5000);\r\n      setErrorMesage(error?.response?.data?.responseMessage);\r\n      // setErrorMesage(error?.response?.data?.responseMessage);\r\n    }\r\n  };\r\n  const formValidationSchemaOtp = yup.object().shape({\r\n    otp: yup\r\n      .string()\r\n      // .required(\"Otp is required\")\r\n      .max(4, \"Only four character OTP are allowed\"),\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (verifyOTPOpen && endTime) {\r\n      const timer = setTimeout(() => {\r\n        setTimeLeft(calculateTimeLeft(endTime));\r\n      }, 1000);\r\n      return () => clearTimeout(timer);\r\n    }\r\n  });\r\n  console.log(\"endTime\", endTime, timeLeft);\r\n  return (\r\n    <>\r\n      <Page title=\"Forget Password\">\r\n        <Container maxWidth=\"sm\">\r\n          <Box textAlign=\"center\" mt={5} mb={5}>\r\n            <Typography variant=\"h2\" style={{ color: \"rgb(186 184 189)\" }}>\r\n              Forgot Password?\r\n            </Typography>\r\n            <Typography variant=\"h6\" style={{ color: \"rgb(186 184 189)\" }}>\r\n              Enter your details to receive a rest link\r\n            </Typography>\r\n          </Box>\r\n          <Paper className={classes.loginBox} elevation={2}>\r\n            <Grid item xs={8} className={classes.donation}>\r\n              <Box>\r\n                <span\r\n                  style={{ fontSize: \"14px\", marginRight: \"8px\" }}\r\n                  className={checked1 ? \"active\" : null}\r\n                  onClick={() => {\r\n                    setChecked1(true);\r\n                    setChecked2(false);\r\n                    setIsSubmit(false);\r\n                  }}\r\n                >\r\n                  Email\r\n                </span>\r\n                <span\r\n                  style={{ fontSize: \"14px\", marginRight: \"8px\" }}\r\n                  className={checked2 ? \"active\" : null}\r\n                  onClick={() => {\r\n                    setChecked2(true);\r\n                    setChecked1(false);\r\n                    setIsSubmit(false);\r\n                  }}\r\n                >\r\n                  Mobile number\r\n                </span>\r\n              </Box>\r\n            </Grid>\r\n            <Box textAlign=\"center\">\r\n              <Formik\r\n                initialValues={formInitialSchema}\r\n                initialStatus={{\r\n                  success: false,\r\n                  successMsg: \"\",\r\n                }}\r\n                validationSchema={formValidationSchema}\r\n                onSubmit={async (values) => {\r\n                  setIsSubmit(true);\r\n                  if (isValidNumber(mobileNumber) || values.email !== \"\") {\r\n                    setIsLoading(true);\r\n                    try {\r\n                      const res = await axios({\r\n                        method: \"POST\",\r\n                        url: ApiConfig.forgotPassword,\r\n                        data: {\r\n                          email: checked2\r\n                            ? mobileNumber?.slice(countryCode.length)\r\n                            : values.email,\r\n                        },\r\n                      });\r\n                      if (res.data.responseCode === 200) {\r\n                        setEndtime(moment().add(5, \"m\").unix());\r\n                        setIsSubmit(false);\r\n                        setEmail(\r\n                          mobileNumber\r\n                            ? mobileNumber?.slice(countryCode.length)\r\n                            : values.email\r\n                        );\r\n                        setVerifyOTPOpen(true);\r\n                        setIsLoading(false);\r\n                        toast.success(\"Please check your email for OTP\");\r\n                        // history.push(\"/verify-otp\");\r\n                        window.sessionStorage.setItem(\"email\", values.email);\r\n                      }\r\n                    } catch (error) {\r\n                      setIsSubmit(false);\r\n\r\n                      setIsLoading(false);\r\n                      setTimeout(() => {\r\n                        setErrorMesage(\"\"); // count is 0 here\r\n                      }, 3000);\r\n                      setErrorMesage(error?.response?.data?.responseMessage);\r\n\r\n                    }\r\n                  }\r\n                }}\r\n              >\r\n                {({\r\n                  errors,\r\n                  handleBlur,\r\n                  handleChange,\r\n                  touched,\r\n                  values,\r\n                  handleSubmit,\r\n                  isSubmitting,\r\n                }) => (\r\n                  <Form onSubmit={handleSubmit}>\r\n                    <Grid container direction={\"column\"} spacing={2}>\r\n                      {checked1 && (\r\n                        <Grid item>\r\n                          <FormControl fullWidth style={{ marginTop: \"30px\" }}>\r\n                            <TextField\r\n                              type=\"text\"\r\n                              variant=\"outlined\"\r\n                              size=\"small\"\r\n                              name=\"email\"\r\n                              placeholder=\"Enter your email\"\r\n                              fullWidth\r\n                              value={values.email}\r\n                              // error={Boolean(touched.email && errors.email)}\r\n                              error={Boolean(\r\n                                (isSubmit &&\r\n                                  checked1 &&\r\n                                  formValue.email === \"\") ||\r\n                                (formValue.email !== \"\" &&\r\n                                  checked1 &&\r\n                                  !isValidEmail(formValue.email))\r\n                              )}\r\n                              onBlur={handleBlur}\r\n                              onChange={handleChange}\r\n                              InputProps={{\r\n                                startAdornment: (\r\n                                  <MailOutlineIcon position=\"start\">\r\n                                    Kg\r\n                                  </MailOutlineIcon>\r\n                                ),\r\n                              }}\r\n                            />\r\n                            <FormHelperText error>\r\n                              {touched.email && errors.email}\r\n                            </FormHelperText>\r\n                          </FormControl>\r\n\r\n                        </Grid>\r\n                      )}\r\n                      &nbsp;\r\n                      {checked2 && (\r\n                        <Grid item>\r\n                          <FormControl\r\n                            fullWidth\r\n                            style={{ marginTop: \"12px\", marginBottom: \"16px\" }}\r\n                          >\r\n                            <PhoneInput\r\n                              country={\"in\"}\r\n                              // disabled={isEdit}\r\n                              name=\"mobileNumber\"\r\n                              value={mobileNumber}\r\n                              error={Boolean(\r\n                                (isSubmit && checked2 && !mobileNumber) ||\r\n                                (isSubmit &&\r\n                                  checked2 &&\r\n                                  !isValidNumber(mobileNumber))\r\n                              )}\r\n                              onChange={(phone, e) => {\r\n                                setCountryCode(e.dialCode);\r\n                                setMobileNumber(phone);\r\n                              }}\r\n                              inputStyle={{\r\n                                borderRadius: \"14px\",\r\n                                width: \"100%\",\r\n                                height: \"48px\",\r\n                                backgroundColor: \"rgb(36 37 38)\",\r\n                                border: \"1px solid #575758\",\r\n                              }}\r\n                            />\r\n                            <FormHelperText error>\r\n                              {(isSubmit &&\r\n                                checked2 &&\r\n                                mobileNumber === \"\" &&\r\n                                \"Mobile number is a required\") ||\r\n                                (mobileNumber !== \"\" &&\r\n                                  checked2 &&\r\n                                  !isValidNumber(mobileNumber) &&\r\n                                  \"Enter a valid mobile number\")}\r\n                            </FormHelperText>\r\n                          </FormControl>\r\n                        </Grid>\r\n                      )}\r\n                      {errorMessage && (\r\n                        <Box\r\n                          textAlign=\"start\"\r\n                          // textAlign=\"left\"\r\n                          ml={1}\r\n                          mt={1}\r\n                          style={{ color: \"#ba1f11\", fontWeight: 600 }}\r\n                        >\r\n                          {errorMessage}\r\n                        </Box>\r\n                      )}\r\n                    </Grid>{\" \"}\r\n                    <Box mt={2} mb={3}>\r\n                      <Button\r\n                        type=\"submit\"\r\n                        variant=\"contained\"\r\n                        color=\"secondary\"\r\n                        fullWidth\r\n                        size=\"large\"\r\n                        disabled={isLoading}\r\n                      // onClick={forgetPassword}\r\n                      >\r\n                        Send {isLoading && <ButtonCircularProgress />}\r\n                      </Button>\r\n                    </Box>\r\n                  </Form>\r\n                )}\r\n              </Formik>\r\n\r\n              <Box>\r\n                <Link\r\n                  component={RouterComponent}\r\n                  to=\"/signup\"\r\n                  style={{\r\n                    display: \"flex\",\r\n                    alignItems: \"center\",\r\n                    justifyContent: \"center\",\r\n                    color: \"#E31A89\",\r\n                    textDecoration: \"none\"\r\n                  }}\r\n                >\r\n                  <ChevronLeftIcon />Back to Sign Up\r\n                </Link>\r\n              </Box>\r\n            </Box>\r\n          </Paper>\r\n        </Container>\r\n\r\n        {verifyOTPOpen && (\r\n          <Dialog\r\n            fullWidth\r\n            maxWidth=\"sm\"\r\n            open={verifyOTPOpen}\r\n          // onClose={() => setVerifyOTPOpen(false)}\r\n          >\r\n            <DialogContent>\r\n              <Page title=\"Verify OTP\">\r\n                <Box textAlign=\"center\">\r\n                  <Typography variant=\"h2\">Verify OTP</Typography>\r\n                  <Box mt={2}>\r\n                    <Typography variant=\"h6\">\r\n                      Please Enter The Verification Code Send To Your Email\r\n                      Address Or Mobile Number\r\n                    </Typography>\r\n                  </Box>\r\n                </Box>\r\n                <Box\r\n                  className=\"coin_list\"\r\n                  elevation={2}\r\n                  style={{ padding: \"25px\", textAlign: \"center\" }}\r\n                >\r\n                  <Formik\r\n                    onSubmit={(values) => verifyOTP(values)}\r\n                    // onSubmit={(values) => VerifyOtp12(values)}\r\n                    // noValidate onSubmit={handleSubmit}\r\n                    initialValues={formInitialSchema}\r\n                    validationSchema={formValidationSchemaOtp}\r\n                  >\r\n                    {({\r\n                      errors,\r\n                      handleBlur,\r\n                      handleChange,\r\n                      handleSubmit,\r\n                      touched,\r\n                      values,\r\n                      DateOfBirth,\r\n                    }) => (\r\n                      <Form>\r\n                        <Box mt={2}>\r\n                          <FormControl fullWidth>\r\n                            <OutlinedInput\r\n                              type=\"number\"\r\n                              variant=\"outlined\"\r\n                              placeholder=\"Enter your OTP\"\r\n                              size=\"small\"\r\n                              name=\"otp\"\r\n                              maxLength=\"4\"\r\n                              error={Boolean(touched.otp && errors.otp)}\r\n                              onBlur={handleBlur}\r\n                              onChange={handleChange}\r\n                              onKeyPress={(event) => {\r\n                                if (event?.key === \"-\" || event?.key === \"+\") {\r\n                                  event.preventDefault();\r\n                                }\r\n                              }}\r\n\r\n                            />\r\n                            <FormHelperText error>\r\n                              {touched.otp && errors.otp}\r\n                            </FormHelperText>\r\n                          </FormControl>\r\n                          {errorMessage && (\r\n                            <Box\r\n                              textAlign=\"left\"\r\n                              ml={1}\r\n                              mt={1}\r\n                              style={{ color: \"#ba1f11\", fontWeight: 600 }}\r\n                            >\r\n                              {errorMessage}\r\n                            </Box>\r\n                          )}\r\n                          {errorMessageresend && (\r\n                            <Box\r\n                              textAlign=\"left\"\r\n                              ml={1}\r\n                              mt={1}\r\n                              style={{ color: \"green\", fontWeight: 600 }}\r\n                            >\r\n                              {errorMessageresend}\r\n                            </Box>\r\n                          )}\r\n                        </Box>\r\n                        {values.otp > 0 && (\r\n                          <Box mt={3}>\r\n                            <Button\r\n                              type=\"submit\"\r\n                              variant=\"contained\"\r\n                              color=\"secondary\"\r\n                              fullWidth\r\n                              size=\"large\"\r\n                              disabled={isloading || isLoading}\r\n                            >\r\n                              Verify OTP{\" \"}\r\n                              {isLoading && <ButtonCircularProgress />}\r\n                            </Button>\r\n                          </Box>\r\n                        )}\r\n                      </Form>\r\n                    )}\r\n                  </Formik>\r\n\r\n                  <Typography variant=\"body1\" style={{ textAlign: \"center\" }}>\r\n                    {timeLeft && timeLeft.seconds >= 0 ? (\r\n                      <>\r\n                        <Typography\r\n                          variant=\"body1\"\r\n                          style={{\r\n                            color: \"#f44336\",\r\n                            fontSize: \"13px\",\r\n                            fontWeight: 500,\r\n                            marginTop: \"10px\",\r\n                          }}\r\n\r\n                        >\r\n                          Your OTP will expire in {timeLeft?.minutes} m :{\" \"}\r\n                          {timeLeft?.seconds} s\r\n                        </Typography>{\" \"}\r\n\r\n                      </>\r\n                    ) : (\r\n                      <>\r\n                        {!isloading && (\r\n                          <Box align=\"center\" mt={5}>\r\n                            <label\r\n                              style={{ cursor: \"pointer\" }}\r\n                              onClick={resendOTP}\r\n                              disabled={isLoadingresend}\r\n                            >\r\n                              Resend OTP{\" \"}\r\n                              {isLoadingresend && <ButtonCircularProgress />}\r\n                            </label>{\" \"}\r\n                            &nbsp;\r\n                          </Box>\r\n                        )}\r\n                      </>\r\n                    )}\r\n                  </Typography>\r\n                </Box>\r\n              </Page>\r\n            </DialogContent>\r\n\r\n          </Dialog>\r\n        )}\r\n      </Page>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Forgetassword;\r\n","import { Container } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\nexport default function Page(props) {\r\n  const { title, children } = props;\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>{title}</title>\r\n      </Helmet>\r\n      <Container>{children}</Container>\r\n    </>\r\n  );\r\n}\r\n"],"sourceRoot":""}